---
title: "Class 6: R functions"
author: "Gaeun: A16814573"
format: pdf
---
Today we are going to explore R functions and begin to think about writing our own functions. 

Let's start simple and write our first function to add some numbers. 

Every function in R has at least 3 things: 

- a **name**, we pick this
- one or more input **arguments**
- the **body**, where the work gets done

```{r}
# y has a default value of 1, z has a default value of 0
add <- function(x, y=1, z=0) {
  x + y + z
}
```

Now let's try it out. 

```{r}
add(10, 1)
```

```{r}
add(x=c(10,1,1,10), y=1)
```

```{r}
add(10)
add(10, 10)
add(10, 10, 20)
```

```{r}
# na.rm overrides the NA
mean( c(10, 10, NA), na.rm=TRUE)
```

## Lab sheet work

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Begin by caluclating the average for student 1

```{r}
student1
mean(student1)
```

Try on student 2

```{r}
student2
mean(student2, na.rm=TRUE)
```

Try on student 3

```{r}
student3
mean(student3, na.rm=TRUE)
```

Hm.... this sucks! I need to try something else and come back to this issue of missing values (NAs).

We also want to drop the lowest score from a given student's set of scores. 

```{r}
student1
```

```{r}
# this removes the 8th value
student1[-8]
```

We can try the `min()` function to find the lowest score. 

```{r}
min(student1)
```

I want to find the location of the min value, not the value itself. For this, I can use `which.min()`.

```{r}
student1
which.min(student1)
```

Let's put these two things together. 

```{r}
which.min(student1)
student1[-8]
mean(student1[-8])

# or
min.ind <- which.min(student1)
mean(student1[-min.ind])

# or
mean(student1[-which.min(student1)])
```

Now trying on student 2. But we need to deal with NA (missing values) somehow..

One idea is we make all the NA values zero. 

```{r}
x <- student2
x
is.na(x)
x[is.na(x)]
x[!is.na(x)]
sum(is.na(x))
```

So far we have a working snippet. 

```{r}
# Find NAs in `x` and makes them 0
x[is.na(x)] <- 0

# Drops lowest value and finds mean
mean(x[-which.min(x)])
```

Now turn it into a function

```{r}
grade <- function(x) {
  x[is.na(x)] <- 0
  mean(x[-which.min(x)])
}
```
 

```{r}
grade(student1)
grade(student2)
grade(student3)
```

But instead of calling each student, we want the function to grade all the students at once. 

Now `apply()` to our class gradebook

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput",
                      row.names = 1)
gradebook
```

```{r}
nrow(gradebook)
```


To use the `apply()` function on this `gradebook` dataset, I need to decide whether I want to "apply" the `grade()` function over the rows (1) or columns (2) of the `gradebook()`. 

```{r}
ans <- apply(gradebook, 1, grade)
ans
```

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(ans)
```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall)?

First use the `apply` function and change the margin to 2 so that it can indicate the columns (homework).

```{r}
hw <- apply(gradebook, 2, grade)
hw
```


THe problem is that it doesn't take into account that that NA homeworks are counted as 0. 

```{r}
masked_gradebook <- gradebook
masked_gradebook [is.na(masked_gradebook)] = 0
hw <- apply(masked_gradebook, 2, mean)
hw
```

Now find the homework score that obtained the lowest score. 

```{r}
which.min(hw)
```

I could modify the `grade()` function to this too - i.e. not drop the lowest options

```{r}
grade2 <- function(x, drop.low=TRUE) {
  
  # Finds NAs in `x` and makes them 0
  x[is.na(x)] <- 0
  
  if(drop.low) {
    cat("Hello low")
    # Drop lowest value and find mean
    out <- mean(x[-which.min(x)])
    
  } else {
    out <- mean(x)
    cat("No low")
  }
  return(out)
  
}
  
grade2(student1, FALSE)
```

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

The function to calculate correlations in R is called `cor()`

```{r}
x <- c(100, 90, 80, 100)
y <- c(100, 90, 80, 100)
z <-  c(80, 90, 100, 10)

# 0 means no correlation at all, 1 means perfectly correlated, -1 means perfectly anti-correlated
cor(x,y)
cor(x,z)
```


```{r}
cor(ans, masked_gradebook$hw1)
```

I want to `apply()` the `cor()` function over the `masked_gradebook()` and use the `ans` scores for the class. 

```{r}
predict <- apply(masked_gradebook, 2, cor, y=ans)
```

Find the highest homework correlation. 

```{r}
which.max(predict)
```


