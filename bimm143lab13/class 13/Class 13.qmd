---
title: "Class 13"
author: "Gaeun Jun (A16814573)"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

### 3. Import countData and colData

```{r}
counts <- read.csv("https://bioboot.github.io/bimm143_W18/class-material/airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("https://bioboot.github.io/bimm143_W18/class-material/airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

Sanity check on correspondence of counts and metadata:

```{r}
metadata$id == colnames(counts)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
View(counts)
```

There are 38694 genes in this dataset

> Q2. How many ‘control’ cell lines do we have? 

```{r}
metadata$dex
```

```{r}
n.control <- sum(metadata$dex == "control")
```

There are 4 'control' cell lines in this dataset.

### 4. Toy differential gene expression

Finding saple id for the labeled control and calculating the mean counts per gene across the samples. 

```{r}
control <- metadata[metadata$dex == "control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

Instead of using `rowSums` and dividing the sample by 4 (by knowing how many control samples there are), you can use the `rowMeans` function. This is more robust because when we add samples to our data, we need to update out `rowSums` function while, `rowMeans` can automatically run through that update. 

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata$dex == "treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Let's make a plot to explore the results a little:

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1], meancounts[,2])
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.mean, treated.mean) + 
  geom_point()
  
```

You would use the geom_point function for this plot. 

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

We will make a log-log plot to draw out this skewed data and see what is going on. 

```{r}
plot(meancounts[,1], meancounts[,2], log="xy",
     xlab="log of control counts",
     ylab="log of treated counts")
```

The argument to plot() both axes on a log scale is `log="xy"`.

We often use log2 transformations when dealing with this sort of data. 

```{r}
log2(20/20)
```

```{r}
log2(40/20)
```

This log2 transformation has thisi nice property where if there is no change the log2 value will be zero and if it double the log2 value will be 1 and if halved it will be -1. 

So lets add a log2 fold change column to our results so far:

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$control.mean)
```

```{r}
head(meancounts)
```

We need to get rid of zero count genes that we can not say anything about

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.ind` argument in the which() function returns any values in the rows or columns that are TRUE. It will tell us which rows have zero counts so that we can ignore them. We then take the first column of the output and call the unique() function so that we don't accidentally count rows that have zero values twice. 

How many genes are remaining?

```{r}
nrow(mycounts)
```

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```

There are 250 up regulated genes at the greater than 2 fc level. 

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

There are 367 down regulated genes at the greater than 2 fc level. 

> Q10. Do you trust these results? Why or why not?

I don't entirely trust these results because it doesn't tell us anything about the significance of the fold chance. These data could be misleading. 

### 5. Setting up for DESeq

Let’s do this the right way. DESeq2 is an R package specifically for analyzing count-based NGS data like RNA-seq. It is available from Bioconductor. Bioconductor is a project to provide tools for analyzing high-throughput genomic data including RNA-seq, ChIP-seq and arrays.

```{r}
# load up DESeq2
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

Running DESeq pipeline on the dds object.

```{r}
dds <- DESeq(dds)
```

### 6. Principal Component Analysis (PCA)

Calculating and plotting PCs. 

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

Build PCA from scratch using ggplot2 package. 

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

### 7. DESeq Analysis

```{r}
res <- results(dds)
res
```

We can get some basic summary tallies using the `summary()` function

```{r}
summary(res, alpha = 0.5)
```

### 8. Addingg annotation data

Alternative genes names and annotation for informative interpretation of results. 

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

Getting a list of available key types to map in the organism annotation package:

```{r}
columns(org.Hs.eg.db)
```

Using `maplds()` function to add individual columns to results table. 

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

Arrange and view results by adjusted p-value

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

Writing out significant results with annotations

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

### 9. Data Visualization

##### Volcano plot

Make a summary plot of our results. 

```{r}
plot(res$log2FoldChange, -log(res$padj), 
     xlab="Log2(FoldChange)",
     ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)

```

Making plot more customizable

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

### 10. Pathway analysis

```{r}
# loading packages
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

Fold changes for the gage() function. 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Running the gage pathway analysis

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Looking at the objeects returned from gage(). 

```{r}
attributes(keggres)
```

Looking at the first few down pathway results

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

Trying out the pathview() function

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

### Optional: Plotting counts for genes of interest

```{r}
i <- grep("CRISPLD2", res$symbol)
res[i,]
```

```{r}
rownames(res[i,])
```

Plotting the counts, where the intgrup variable is the "dex" column

```{r}
plotCounts(dds, gene="ENSG00000103196", intgroup="dex")
```

```{r}
# Return the data
d <- plotCounts(dds, gene="ENSG00000103196", intgroup="dex", returnData=TRUE)
head(d)
```

Making this into a boxplot

```{r}
boxplot(count ~ dex , data=d)
```

Boxplot using ggplot2

```{r}
library(ggplot2)
ggplot(d, aes(dex, count, fill=dex)) + 
  geom_boxplot() + 
  scale_y_log10() + 
  ggtitle("CRISPLD2")
```












